{"version":3,"sources":["logo.svg","serviceWorker.js","Item.jsx","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Item","data","Card","className","Img","variant","src","image","Body","price","Title","name","Button","onClick","id","lst","push","Text","category","size","color","App","find_info","idP","i","items","length","find_image","React","useState","show","setShow","handleClose","handleShow","Navbar","style","backgroundColor","position","collapseOnSelect","expand","bg","fixed","Brand","Toggle","aria-controls","Collapse","Nav","Modal","onHide","Header","closeButton","map","idx","ListGroup","horizontal","key","index","indexOf","splice","setTimeout","fp","Footer","Container","Col","xs","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"js/main.0a09e470.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nimport {Card, Badge, Button } from 'react-bootstrap';\nimport { register } from './serviceWorker';\n\n\n\nexport function Item({data}) {\n\n\n    function addToCart(id){\n        window.lst.push(id)\n    }\n\n\n    return (\n        <Card className=\"h-100 bg-white w-auto \">\n            <Card.Img variant=\"top\" src={data.image} />\n            <Card.Body className=\"d-flex flex-column\">{data.price + \"$\"}\n                <div className=\"d-flex mb-2 justify-content-between\">\n                    <Card.Title className=\"mb-0 font-weight-bold\">{data.name}</Card.Title>\n\n                    \n                    <Button\n                        onClick={() => {addToCart(data.id)}}\n                        className=\"mt-auto font-weight-bold btn btn-success\"\n                        >\n                            Add to Cart</Button>\n                </div>\n                <Card.Text className=\"\">{data.category + \" \" + data.size + \" \" + data.color}</Card.Text>\n            </Card.Body>\n        </Card>\n    )\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {Container, Nav, NavDropdown, Card, Navbar, Col, Button, Modal, ListGroup, ListGroupItem } from 'react-bootstrap';\nimport {Item} from './Item';\n\nimport items from './item.json'\n\n\nwindow.lst = []\n\nfunction App() {\n  \n  function find_info(idP) {\n    \n    for (var i = 0 ; i < items.length ; i++)\n    {\n      if (items[i][\"id\"] == idP) {\n        return items[i]\n      }\n    }\n    return 'XD'\n  }\n  function find_image(idP) {\n    \n    for (var i = 0 ; i < items.length ; i++)\n    {\n      if (items[i][\"id\"] == idP) {\n        return items[i][\"image\"]\n      }\n    }\n    return 'XD'\n  }\n  function vide()\n  {\n    window.lst = []\n    handleClose()\n    setTimeout(() => {\n      handleShow()\n    }, 1);\n\n  }\n\n  \n  let listitem = [ ]\n  const [show, setShow] = React.useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  \n  function fp(id){\n    var index = window.lst.indexOf(id); // Let's say it's Bob.\n    //alert(window.lst)\n    //alert(\"looking for: \" + id + \" : \" + index)\n    window.lst.splice(index, 1);\n    handleClose()\n    setTimeout(() => {\n      handleShow()\n    }, 1);\n  }\n\n  return (\n  [\n    <Navbar style={{backgroundColor: \"#071740\", position: \"sticky\"}} collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" fixed=\"top\">\n      <Navbar.Brand>Gaétan's Frippes</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Button onClick={handleShow}>\n            Checkout The Cart\n          </Button>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>,\n\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Your Cart</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        {window.lst.map((id, idx) => (\n          <ListGroup horizontal={id} className=\"my-2\" key={idx}>\n            <ListGroup.Item>\n              <Card className=\"h-100 bg-white w-auto \">\n                <Card.Img variant=\"top\" src={find_image(id)} />\n                <Card.Body className=\"d-flex flex-column\">{find_info(id)[\"price\"] + \"$\"}\n                    <Card.Text className=\"\">{find_info(id)[\"name\"] + \" \" + find_info(id)[\"color\"]}</Card.Text>\n                    <Button\n                        onClick={() => {fp(id)}}\n                        className=\"mt-auto font-weight-bold btn btn-success\"\n                        >\n                            Remove From cart</Button>\n                </Card.Body>\n              </Card>\n            </ListGroup.Item>\n          </ListGroup>\n        ))}\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={handleClose}>\n          Continue Shopping\n        </Button>\n        <Button onClick={() => vide()}>\n          Order\n        </Button>\n      </Modal.Footer>\n    </Modal>,\n    \n    <Container>\n      <Col>\n        {items.map(data => (\n          <Col xs={9} className=\"mb-5\" key={`${data.id}`}>\n            <Item data={data}/>\n          </Col>\n        ))}\n      </Col>\n\n    </Container>]\n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}